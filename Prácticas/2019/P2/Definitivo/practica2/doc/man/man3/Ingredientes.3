.TH "Ingredientes" 3 "Domingo, 27 de Octubre de 2019" "Version 0.1" "Práctica 2 - Estructura de Datos" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Ingredientes \- T\&.D\&.A \fBIngredientes\fP\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <ingredientes\&.h>\fP
.SS "Métodos públicos"

.in +1c
.ti -1c
.RI "\fBIngredientes\fP ()"
.br
.RI "Constructor por defecto de la clase\&. Crea el conjunto de ingredientes vacío\&. "
.ti -1c
.RI "void \fBinsertarIngrediente\fP (const Ingrediente &ingrediente)"
.br
.RI "insertarIngrediente "
.ti -1c
.RI "void \fBborrarIngrediente\fP (const int nroIngrediente)"
.br
.RI "borrarIngrediente "
.ti -1c
.RI "void \fBborrarIngredienteXNombre\fP (const string &nombre)"
.br
.RI "borraIngredienteXNombre "
.ti -1c
.RI "void \fBmodificaIngrediente\fP (const int i, const Ingrediente &ingrediente)"
.br
.RI "modificaIngrediente "
.ti -1c
.RI "Ingrediente \fBgetIngrediente\fP (const int i)"
.br
.RI "getIngrediente "
.ti -1c
.RI "Ingrediente \fBget\fP (const string &nombre)"
.br
.RI "get "
.ti -1c
.RI "const int \fBgetNumIngredientes\fP () const"
.br
.RI "getNumIngredientes "
.ti -1c
.RI "string \fBgetInformacion\fP (const string nombre)"
.br
.RI "getInformación "
.ti -1c
.RI "\fBVector_Dinamico\fP< string > \fBgetTipos\fP ()"
.br
.RI "getTipos "
.ti -1c
.RI "\fBIngredientes\fP \fBgetIngredientesTipo\fP (const string tipo)"
.br
.RI "getIngredientesTipos "
.ti -1c
.RI "Ingrediente & \fBoperator[]\fP (const int i)"
.br
.RI "Sorbrecarga del operador[]\&. "
.ti -1c
.RI "const Ingrediente & \fBoperator[]\fP (const int i) const"
.br
.RI "Sorbrecarga constante del operador[]\&. "
.ti -1c
.RI "void \fBordenaPorNombre\fP ()"
.br
.RI "ordenaPorNombre "
.ti -1c
.RI "\fBIngredientes\fP \fBordenaPorTipo\fP ()"
.br
.RI "ordenaPorTipo "
.ti -1c
.RI "void \fBimprimirPorTipo\fP (ostream &os)"
.br
.RI "ordenaPorTipo "
.in -1c
.SS "Amigas"

.in +1c
.ti -1c
.RI "ostream & \fBoperator<<\fP (ostream &os, const \fBIngredientes\fP &ingredientes)"
.br
.RI "Salida de \fBIngredientes\fP a ostream\&. "
.ti -1c
.RI "istream & \fBoperator>>\fP (istream &is, \fBIngredientes\fP &ingredientes)"
.br
.RI "Entrada de \fBIngredientes\fP a istream\&. "
.in -1c
.SH "Descripción detallada"
.PP 
T\&.D\&.A \fBIngredientes\fP\&. 

Una instancia \fIingredientes\fP del tipo de datos abstracto \fC\fBIngredientes\fP\fP es un objeto que representa un conjunto de ingredientes\&. A su vez, esta instancia ingredientes se compone de un \fBVector_Dinamico\fP de \fBIngredientes\fP\&.
.PP
Lo representamos como
.PP
datos
.PP
Un ejemplo de su uso: 
.PP
.nf

.fi
.PP
.PP
\fBAutor\fP
.RS 4
Miguel Ángel Campos Cubillas 
.RE
.PP
\fBFecha\fP
.RS 4
Octubre 2019 
.RE
.PP

.PP
Definición en la línea 31 del archivo ingredientes\&.h\&.
.SH "Documentación de las funciones miembro"
.PP 
.SS "void Ingredientes::borrarIngrediente (const int nroIngrediente)"

.PP
borrarIngrediente 
.PP
\fBParámetros\fP
.RS 4
\fInroIngrediente\fP posición del Ingrediente a borrar 
.RE
.PP
\fBDevuelve\fP
.RS 4
Borra el Ingrediente de la posición nroIngrediente del objeto implícito 
.RE
.PP

.SS "void Ingredientes::borrarIngredienteXNombre (const string & nombre)"

.PP
borraIngredienteXNombre 
.PP
\fBParámetros\fP
.RS 4
\fInombre\fP del Ingrediente a borrar 
.RE
.PP
\fBDevuelve\fP
.RS 4
Borra el Ingrediente del conjunto cuyo nombre coincide con el parámetro 
.RE
.PP

.SS "Ingrediente Ingredientes::get (const string & nombre)"

.PP
get 
.PP
\fBParámetros\fP
.RS 4
\fInombre\fP nombre del ingrediente 
.RE
.PP
\fBDevuelve\fP
.RS 4
Devuelve el Ingrediente cuyo nombre es equivalente al parametro 
.RE
.PP
\fBPrecondición\fP
.RS 4
nombre debe de ser un nombre válido 
.RE
.PP

.SS "string Ingredientes::getInformacion (const string nombre)"

.PP
getInformación 
.PP
\fBParámetros\fP
.RS 4
\fInombre\fP nombre del ingrediente 
.RE
.PP
\fBDevuelve\fP
.RS 4
Devuelve la nformación del ingrediente cuyo nombre es equivalente al parametro 
.RE
.PP

.SS "Ingrediente Ingredientes::getIngrediente (const int i)"

.PP
getIngrediente 
.PP
\fBParámetros\fP
.RS 4
\fIi\fP posición del Ingrediente 
.RE
.PP
\fBDevuelve\fP
.RS 4
Devuelve el Ingrediente de la posición i 
.RE
.PP
\fBPrecondición\fP
.RS 4
i debe de ser un valor válido 
.RE
.PP

.SS "\fBIngredientes\fP Ingredientes::getIngredientesTipo (const string tipo)"

.PP
getIngredientesTipos 
.PP
\fBParámetros\fP
.RS 4
\fItipo\fP tipo de los ingredientes a buscar 
.RE
.PP
\fBDevuelve\fP
.RS 4
\fBIngredientes\fP cuyo tipo coincide con el parametro tipo 
.RE
.PP
\fBPrecondición\fP
.RS 4
tipo existente 
.RE
.PP

.SS "const int Ingredientes::getNumIngredientes () const"

.PP
getNumIngredientes 
.PP
\fBDevuelve\fP
.RS 4
Devuelve el número de ingredientes del conjunto 
.RE
.PP

.SS "\fBVector_Dinamico\fP<string> Ingredientes::getTipos ()"

.PP
getTipos 
.PP
\fBDevuelve\fP
.RS 4
Devuelve un \fBVector_Dinamico\fP de tipo string con los tipos de los ingredientes del conjunto 
.RE
.PP

.SS "void Ingredientes::imprimirPorTipo (ostream & os)"

.PP
ordenaPorTipo 
.PP
\fBDevuelve\fP
.RS 4
ordena los \fBIngredientes\fP del objeto implícito en otra instancia de \fBIngredientes\fP por tipo y la imprime 
.RE
.PP

.SS "void Ingredientes::insertarIngrediente (const Ingrediente & ingrediente)"

.PP
insertarIngrediente 
.PP
\fBParámetros\fP
.RS 4
\fIingrediente\fP Ingrediente a insertar 
.RE
.PP
\fBDevuelve\fP
.RS 4
Inserta en el objeto implícito el Ingrediente 
.RE
.PP

.SS "void Ingredientes::modificaIngrediente (const int i, const Ingrediente & ingrediente)"

.PP
modificaIngrediente 
.PP
\fBParámetros\fP
.RS 4
\fIi\fP posición del Ingrediente a modificar 
.br
\fIingrediente\fP Ingrediente para modificar 
.RE
.PP
\fBDevuelve\fP
.RS 4
Modifica el Ingrediente de la posición i por el 'ingrediente' 
.RE
.PP

.SS "Ingrediente& Ingredientes::operator[] (const int i)"

.PP
Sorbrecarga del operador[]\&. 
.PP
\fBParámetros\fP
.RS 4
\fIi\fP entero que indica una posicion 
.RE
.PP
\fBDevuelve\fP
.RS 4
Ingrediente de la posicion i 
.RE
.PP

.SS "const Ingrediente& Ingredientes::operator[] (const int i) const"

.PP
Sorbrecarga constante del operador[]\&. 
.PP
\fBParámetros\fP
.RS 4
\fIi\fP entero que indica una posicion 
.RE
.PP
\fBDevuelve\fP
.RS 4
Ingrediente de la posicion i 
.RE
.PP

.SS "void Ingredientes::ordenaPorNombre ()"

.PP
ordenaPorNombre 
.PP
\fBDevuelve\fP
.RS 4
ordena los \fBIngredientes\fP por orden alfabético 
.RE
.PP

.SS "\fBIngredientes\fP Ingredientes::ordenaPorTipo ()"

.PP
ordenaPorTipo 
.PP
\fBDevuelve\fP
.RS 4
ordena los \fBIngredientes\fP por tipo y los devuelve en un objeto de tipo \fBIngredientes\fP 
.RE
.PP

.SH "Documentación de las funciones relacionadas y clases amigas"
.PP 
.SS "ostream& operator<< (ostream & os, const \fBIngredientes\fP & ingredientes)\fC [friend]\fP"

.PP
Salida de \fBIngredientes\fP a ostream\&. 
.PP
\fBParámetros\fP
.RS 4
\fIos\fP stream de salida 
.br
\fIingredientes\fP \fBIngredientes\fP a escribir 
.RE
.PP
\fBPostcondición\fP
.RS 4
Se obtiene en \fIos\fP los ingredientes con \fIingrediente\fP los ingredientes del conjunto 
.RE
.PP

.SS "istream& operator>> (istream & is, \fBIngredientes\fP & ingredientes)\fC [friend]\fP"

.PP
Entrada de \fBIngredientes\fP a istream\&. 
.PP
\fBParámetros\fP
.RS 4
\fIis\fP stream de entrada 
.br
\fIingredientes\fP \fBIngredientes\fP que reciben los ingredientes 
.RE
.PP
\fBValores devueltos\fP
.RS 4
\fILos\fP ingredientes leidos en ingredientes 
.RE
.PP
\fBPrecondición\fP
.RS 4
La entrada tiene el formato ingredientes con \fIingrediente\fP 
.RE
.PP


.SH "Autor"
.PP 
Generado automáticamente por Doxygen para Práctica 2 - Estructura de Datos del código fuente\&.
