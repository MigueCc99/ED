.TH "Receta" 3 "Domingo, 29 de Diciembre de 2019" "Version 0.1" "Práctica 3 - Estructura de Datos" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Receta \- T\&.D\&.A \fBReceta\fP\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <receta\&.h>\fP
.SS "Clases"

.in +1c
.ti -1c
.RI "class \fBconst_iterator\fP"
.br
.RI "Clase para iterar sobre los ingredientes (modo const) "
.ti -1c
.RI "class \fBiterator\fP"
.br
.RI "Clase para iterar sobre los ingredientes\&. "
.in -1c
.SS "Métodos públicos"

.in +1c
.ti -1c
.RI "\fBReceta\fP ()"
.br
.RI "Constructor por defecto de la clase\&. "
.ti -1c
.RI "\fBReceta\fP (string code, int plato, string nombre, list< pair< string, unsigned int > > ings)"
.br
.RI "Constructor de la clase\&. "
.ti -1c
.RI "\fBReceta\fP (const \fBReceta\fP &receta)"
.br
.RI "Constructor de copia de la clase\&. "
.ti -1c
.RI "\fBReceta\fP & \fBoperator=\fP (const \fBReceta\fP &receta)"
.br
.RI "Sobrecarga del operador=\&. "
.ti -1c
.RI "const string \fBgetNombre\fP () const"
.br
.RI "getNombre "
.ti -1c
.RI "const string \fBgetCode\fP () const"
.br
.RI "getCode "
.ti -1c
.RI "const float \fBgetCalorias\fP () const"
.br
.RI "getCalorias "
.ti -1c
.RI "const float \fBgetHc\fP () const"
.br
.RI "getHc "
.ti -1c
.RI "const float \fBgetGrasas\fP () const"
.br
.RI "getGrasas "
.ti -1c
.RI "const float \fBgetProteinas\fP () const"
.br
.RI "getProteinas "
.ti -1c
.RI "const float \fBgetFibras\fP () const"
.br
.RI "getFibras "
.ti -1c
.RI "const int \fBningredientes\fP ()"
.br
.RI "ningredientes "
.ti -1c
.RI "void \fBsetCalorias\fP (float calorias)"
.br
.RI "setCalorias "
.ti -1c
.RI "void \fBsetHc\fP (float hc)"
.br
.RI "setHc "
.ti -1c
.RI "void \fBsetGrasas\fP (float grasas)"
.br
.RI "setGrasas "
.ti -1c
.RI "void \fBsetProteinas\fP (float proteinas)"
.br
.RI "setProteinas "
.ti -1c
.RI "void \fBsetFibra\fP (float fibra)"
.br
.RI "setFibra "
.ti -1c
.RI "void \fBobtieneNutricional\fP (\fBIngredientes\fP &ingredientes)"
.br
.ti -1c
.RI "void \fBmuestraNutricional\fP ()"
.br
.ti -1c
.RI "\fBiterator\fP \fBbegin\fP ()"
.br
.RI "Inicializa un iterator al comienzo de \fBReceta\fP\&. "
.ti -1c
.RI "\fBiterator\fP \fBend\fP ()"
.br
.RI "Inicializa un iterator al final de \fBReceta\fP\&. "
.ti -1c
.RI "\fBconst_iterator\fP \fBbegin\fP () const"
.br
.RI "Inicializa un \fBconst_iterator\fP al comienzo de \fBReceta\fP\&. "
.ti -1c
.RI "\fBconst_iterator\fP \fBend\fP () const"
.br
.RI "Inicializa un \fBconst_iterator\fP al final de \fBReceta\fP\&. "
.in -1c
.SS "Amigas"

.in +1c
.ti -1c
.RI "ostream & \fBoperator<<\fP (ostream &os, const \fBReceta\fP &receta)"
.br
.RI "Salida de una \fBReceta\fP a ostream\&. "
.ti -1c
.RI "istream & \fBoperator>>\fP (istream &is, \fBReceta\fP &receta)"
.br
.RI "Entrada de un \fBReceta\fP desde istream\&. "
.in -1c
.SH "Descripción detallada"
.PP 
T\&.D\&.A \fBReceta\fP\&. 

Una instancia \fIingr\fP del tipo de datos abstracto \fC\fBReceta\fP\fP es un objeto que representa una \fBReceta\fP\&. A su vez, esta \fBReceta\fP se compone de un código que la representa únicamente, un entero que representa el tipo de plato que compone (1º,2º,3º), un nombre, una lista de ingredientes y finalmente una secuencia de float que determinan las calorias, hidratos de carbono, grasas, proteinas y fibras de la receta
.PP
Lo representamos como
.PP
code, plato, nombre, ingredientes, calorias, hc, grasas, proteinas, fibra
.PP
Un ejemplo de su uso: 
.PP
.nf

.fi
.PP
.PP
\fBAutor\fP
.RS 4
Miguel Ángel Campos Cubillas 
.RE
.PP
\fBFecha\fP
.RS 4
Octubre 2019 
.RE
.PP

.PP
Definición en la línea 36 del archivo receta\&.h\&.
.SH "Documentación del constructor y destructor"
.PP 
.SS "Receta::Receta (string code, int plato, string nombre, list< pair< string, unsigned int > > ings)"

.PP
Constructor de la clase\&. 
.PP
\fBParámetros\fP
.RS 4
\fIcode\fP código de la receta a construir 
.br
\fIplato\fP entero que representa el tipo de plato a construir 
.br
\fInombre\fP string que representa el nombre de la receta a construir 
.br
\fIings\fP lista de ingredientes de la receta a construir 
.RE
.PP
\fBDevuelve\fP
.RS 4
Crea la receta {code,plato,nombre,ings} 
.RE
.PP
\fBPrecondición\fP
.RS 4
code = 'Ri' && 1 <= rep\&.plato <= 3 
.RE
.PP

.SS "Receta::Receta (const \fBReceta\fP & receta)"

.PP
Constructor de copia de la clase\&. 
.PP
\fBParámetros\fP
.RS 4
\fIreceta\fP a copiar 
.RE
.PP

.SH "Documentación de las funciones miembro"
.PP 
.SS "const float Receta::getCalorias () const"

.PP
getCalorias 
.PP
\fBDevuelve\fP
.RS 4
Devuelve las calorias de la receta 
.RE
.PP

.SS "const string Receta::getCode () const"

.PP
getCode 
.PP
\fBDevuelve\fP
.RS 4
Devuelve el code de la receta 
.RE
.PP

.SS "const float Receta::getFibras () const"

.PP
getFibras 
.PP
\fBDevuelve\fP
.RS 4
Devuelve las fibras de la receta 
.RE
.PP

.SS "const float Receta::getGrasas () const"

.PP
getGrasas 
.PP
\fBDevuelve\fP
.RS 4
Devuelve las grasas de la receta 
.RE
.PP

.SS "const float Receta::getHc () const"

.PP
getHc 
.PP
\fBDevuelve\fP
.RS 4
Devuelve los hidratos de carbono de la receta 
.RE
.PP

.SS "const string Receta::getNombre () const"

.PP
getNombre 
.PP
\fBDevuelve\fP
.RS 4
Devuelve el nombre de la receta 
.RE
.PP

.SS "const float Receta::getProteinas () const"

.PP
getProteinas 
.PP
\fBDevuelve\fP
.RS 4
Devuelve las proteinas de la receta 
.RE
.PP

.SS "const int Receta::ningredientes ()"

.PP
ningredientes 
.PP
\fBDevuelve\fP
.RS 4
Devuelve el número de ingredientes de la receta 
.RE
.PP

.SS "\fBReceta\fP& Receta::operator= (const \fBReceta\fP & receta)"

.PP
Sobrecarga del operador=\&. 
.PP
\fBParámetros\fP
.RS 4
\fIreceta\fP receta a igualar al objeto implícito 
.RE
.PP

.SS "void Receta::setCalorias (float calorias)"

.PP
setCalorias 
.PP
\fBDevuelve\fP
.RS 4
actualiza las calorias de la receta 
.RE
.PP

.SS "void Receta::setFibra (float fibra)"

.PP
setFibra 
.PP
\fBDevuelve\fP
.RS 4
actualiza las fibras de la receta 
.RE
.PP

.SS "void Receta::setGrasas (float grasas)"

.PP
setGrasas 
.PP
\fBDevuelve\fP
.RS 4
actualiza las grasas de la receta 
.RE
.PP

.SS "void Receta::setHc (float hc)"

.PP
setHc 
.PP
\fBDevuelve\fP
.RS 4
actualiza los hidratos de carbono de la receta 
.RE
.PP

.SS "void Receta::setProteinas (float proteinas)"

.PP
setProteinas 
.PP
\fBDevuelve\fP
.RS 4
actualiza las proteinas de la receta 
.RE
.PP

.SH "Documentación de las funciones relacionadas y clases amigas"
.PP 
.SS "ostream& operator<< (ostream & os, const \fBReceta\fP & receta)\fC [friend]\fP"

.PP
Salida de una \fBReceta\fP a ostream\&. 
.PP
\fBParámetros\fP
.RS 4
\fIos\fP de salida 
.br
\fIreceta\fP \fBReceta\fP a escribir 
.RE
.PP
\fBPostcondición\fP
.RS 4
Se obtiene en \fIos\fP la receta con \fI{code\fP,plato,nombre,ings} 
.br
 
.RE
.PP

.SS "istream& operator>> (istream & is, \fBReceta\fP & receta)\fC [friend]\fP"

.PP
Entrada de un \fBReceta\fP desde istream\&. 
.PP
\fBParámetros\fP
.RS 4
\fIis\fP stream de entrada 
.br
\fIreceta\fP \fBReceta\fP que recibe 
.RE
.PP
\fBValores devueltos\fP
.RS 4
\fIEl\fP \fBReceta\fP leído en ingrediente 
.RE
.PP
\fBPrecondición\fP
.RS 4
La entrada tiene el formato code;plato;nombre;ings con \fIcode\fP, \fIplato\fP, \fInombre\fP, \fIings\fP 
.RE
.PP


.SH "Autor"
.PP 
Generado automáticamente por Doxygen para Práctica 3 - Estructura de Datos del código fuente\&.
