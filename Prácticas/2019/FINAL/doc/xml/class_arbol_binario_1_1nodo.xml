<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="class_arbol_binario_1_1nodo" kind="class" language="C++" prot="public">
    <compoundname>ArbolBinario::nodo</compoundname>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_arbol_binario_1_1nodo_1a7be0572f10c8181362aec9878ff210f0" prot="private" static="no" mutable="no">
        <type>info_nodo *</type>
        <definition>info_nodo* ArbolBinario&lt; T &gt;::nodo::p</definition>
        <argsstring></argsstring>
        <name>p</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arbolbinario.h" line="331" column="20" bodyfile="include/arbolbinario.h" bodystart="331" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_arbol_binario_1_1nodo_1a7aaf1bc41122321eaeb4dcc50d489fe8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class ArbolBinario</definition>
        <argsstring></argsstring>
        <name>ArbolBinario</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arbolbinario.h" line="409" column="2" bodyfile="include/arbolbinario.h" bodystart="409" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_arbol_binario_1_1nodo_1a4aa0da8bfbc320a8daff98451ee65b6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class preorden_iterador</definition>
        <argsstring></argsstring>
        <name>preorden_iterador</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arbolbinario.h" line="410" column="2" bodyfile="include/arbolbinario.h" bodystart="410" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_arbol_binario_1_1nodo_1ac74c0fa737805eb9e7cca733f43f4e62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class inorden_iterador</definition>
        <argsstring></argsstring>
        <name>inorden_iterador</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arbolbinario.h" line="411" column="2" bodyfile="include/arbolbinario.h" bodystart="411" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_arbol_binario_1_1nodo_1a4c0a969b995bdaf811e374833b2bafd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class postorden_iterador</definition>
        <argsstring></argsstring>
        <name>postorden_iterador</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arbolbinario.h" line="412" column="2" bodyfile="include/arbolbinario.h" bodystart="412" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_arbol_binario_1_1nodo_1a9c0015bf78e40fc811ad106804cba939" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ArbolBinario&lt; T &gt;::nodo::nodo</definition>
        <argsstring>(info_nodo *i)</argsstring>
        <name>nodo</name>
        <param>
          <type>info_nodo *</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Constructo con parametros. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>nodo que se copia </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arbolbinario.h" line="336" column="10" bodyfile="include/arbolbinario.h" bodystart="336" bodyend="336"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_arbol_binario_1_1nodo_1ac714bbecdf111e68b7725b44048e0d02" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ArbolBinario&lt; T &gt;::nodo::nodo</definition>
        <argsstring>()</argsstring>
        <name>nodo</name>
        <briefdescription>
<para>Contructor por defecto. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arbolbinario.h" line="341" column="10" bodyfile="include/arbolbinario.h" bodystart="341" bodyend="341"/>
      </memberdef>
      <memberdef kind="function" id="class_arbol_binario_1_1nodo_1ab73087719276b298b3801c772da82fdf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ArbolBinario&lt; T &gt;::nodo::nodo</definition>
        <argsstring>(const nodo &amp;n)</argsstring>
        <name>nodo</name>
        <param>
          <type>const <ref refid="class_arbol_binario_1_1nodo" kindref="compound">nodo</ref> &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Constructo de copia. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>nodo fuente </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arbolbinario.h" line="347" column="10" bodyfile="include/arbolbinario.h" bodystart="347" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="class_arbol_binario_1_1nodo_1a99010585e481f5f8172fbcf42e39827b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T&amp; ArbolBinario&lt; T &gt;::nodo::operator*</definition>
        <argsstring>() const</argsstring>
        <name>operator*</name>
        <briefdescription>
<para>acceso a la informacion del nodo </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arbolbinario.h" line="351" column="18" bodyfile="include/arbolbinario.h" bodystart="351" bodyend="354"/>
      </memberdef>
      <memberdef kind="function" id="class_arbol_binario_1_1nodo_1a1438c24ae9ccbd9b8eab6e632c52e702" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T&amp; ArbolBinario&lt; T &gt;::nodo::operator*</definition>
        <argsstring>()</argsstring>
        <name>operator*</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arbolbinario.h" line="355" column="11" bodyfile="include/arbolbinario.h" bodystart="355" bodyend="358"/>
      </memberdef>
      <memberdef kind="function" id="class_arbol_binario_1_1nodo_1a02dfaed2a589195911bc8e75bd97d298" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool ArbolBinario&lt; T &gt;::nodo::operator==</definition>
        <argsstring>(const nodo &amp;n)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_arbol_binario_1_1nodo" kindref="compound">nodo</ref> &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>operacion de igualdad entre dos posiciones </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>nodo con el que se compara </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true si son iguales false en caso contrario </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arbolbinario.h" line="364" column="7" bodyfile="include/arbolbinario.h" bodystart="364" bodyend="366"/>
      </memberdef>
      <memberdef kind="function" id="class_arbol_binario_1_1nodo_1a274a6b1912079430c2be6fa3a9f2010d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool ArbolBinario&lt; T &gt;::nodo::operator!=</definition>
        <argsstring>(const nodo &amp;n)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="class_arbol_binario_1_1nodo" kindref="compound">nodo</ref> &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>operacion de desigualdad entre dos posiciones </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>nodo con el que se compara </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true si son desiguales false en caso contrario </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arbolbinario.h" line="372" column="7" bodyfile="include/arbolbinario.h" bodystart="372" bodyend="374"/>
      </memberdef>
      <memberdef kind="function" id="class_arbol_binario_1_1nodo_1a78b4d51bc9bd22f16a70c8e2bee3fef1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_arbol_binario_1_1nodo" kindref="compound">nodo</ref></type>
        <definition>nodo ArbolBinario&lt; T &gt;::nodo::padre</definition>
        <argsstring>()</argsstring>
        <name>padre</name>
        <briefdescription>
<para>Nodo del padre. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>devuelve un nodo apuntando padre </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arbolbinario.h" line="379" column="7" bodyfile="include/arbolbinario.h" bodystart="379" bodyend="383"/>
      </memberdef>
      <memberdef kind="function" id="class_arbol_binario_1_1nodo_1a6dd19bf49c4336014f85f83f6a9f5943" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_arbol_binario_1_1nodo" kindref="compound">nodo</ref></type>
        <definition>nodo ArbolBinario&lt; T &gt;::nodo::hi</definition>
        <argsstring>()</argsstring>
        <name>hi</name>
        <briefdescription>
<para>Nodo del padre. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>devuelve un nodo apuntando al hijo a la izquierda </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arbolbinario.h" line="388" column="7" bodyfile="include/arbolbinario.h" bodystart="388" bodyend="392"/>
      </memberdef>
      <memberdef kind="function" id="class_arbol_binario_1_1nodo_1ab4bd1d7b0ae90543b89a3b7e4d7d4470" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_arbol_binario_1_1nodo" kindref="compound">nodo</ref></type>
        <definition>nodo ArbolBinario&lt; T &gt;::nodo::hd</definition>
        <argsstring>()</argsstring>
        <name>hd</name>
        <briefdescription>
<para>Nodo del padre. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>devuelve un nodo apuntando al hijo a la derecha </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arbolbinario.h" line="397" column="7" bodyfile="include/arbolbinario.h" bodystart="397" bodyend="401"/>
      </memberdef>
      <memberdef kind="function" id="class_arbol_binario_1_1nodo_1a92f885c1e463d5c24a66281c6589b4a3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool ArbolBinario&lt; T &gt;::nodo::nulo</definition>
        <argsstring>()</argsstring>
        <name>nulo</name>
        <briefdescription>
<para>dice si un nodo es nulo </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true si es nulo false en caso contrario </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/arbolbinario.h" line="406" column="7" bodyfile="include/arbolbinario.h" bodystart="406" bodyend="408"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/arbolbinario.h" line="329" column="15" bodyfile="include/arbolbinario.h" bodystart="329" bodyend="414"/>
    <listofallmembers>
      <member refid="class_arbol_binario_1_1nodo_1a7aaf1bc41122321eaeb4dcc50d489fe8" prot="public" virt="non-virtual"><scope>ArbolBinario::nodo</scope><name>ArbolBinario</name></member>
      <member refid="class_arbol_binario_1_1nodo_1ab4bd1d7b0ae90543b89a3b7e4d7d4470" prot="public" virt="non-virtual"><scope>ArbolBinario::nodo</scope><name>hd</name></member>
      <member refid="class_arbol_binario_1_1nodo_1a6dd19bf49c4336014f85f83f6a9f5943" prot="public" virt="non-virtual"><scope>ArbolBinario::nodo</scope><name>hi</name></member>
      <member refid="class_arbol_binario_1_1nodo_1ac74c0fa737805eb9e7cca733f43f4e62" prot="public" virt="non-virtual"><scope>ArbolBinario::nodo</scope><name>inorden_iterador</name></member>
      <member refid="class_arbol_binario_1_1nodo_1a9c0015bf78e40fc811ad106804cba939" prot="private" virt="non-virtual"><scope>ArbolBinario::nodo</scope><name>nodo</name></member>
      <member refid="class_arbol_binario_1_1nodo_1ac714bbecdf111e68b7725b44048e0d02" prot="public" virt="non-virtual"><scope>ArbolBinario::nodo</scope><name>nodo</name></member>
      <member refid="class_arbol_binario_1_1nodo_1ab73087719276b298b3801c772da82fdf" prot="public" virt="non-virtual"><scope>ArbolBinario::nodo</scope><name>nodo</name></member>
      <member refid="class_arbol_binario_1_1nodo_1a92f885c1e463d5c24a66281c6589b4a3" prot="public" virt="non-virtual"><scope>ArbolBinario::nodo</scope><name>nulo</name></member>
      <member refid="class_arbol_binario_1_1nodo_1a274a6b1912079430c2be6fa3a9f2010d" prot="public" virt="non-virtual"><scope>ArbolBinario::nodo</scope><name>operator!=</name></member>
      <member refid="class_arbol_binario_1_1nodo_1a99010585e481f5f8172fbcf42e39827b" prot="public" virt="non-virtual"><scope>ArbolBinario::nodo</scope><name>operator*</name></member>
      <member refid="class_arbol_binario_1_1nodo_1a1438c24ae9ccbd9b8eab6e632c52e702" prot="public" virt="non-virtual"><scope>ArbolBinario::nodo</scope><name>operator*</name></member>
      <member refid="class_arbol_binario_1_1nodo_1a02dfaed2a589195911bc8e75bd97d298" prot="public" virt="non-virtual"><scope>ArbolBinario::nodo</scope><name>operator==</name></member>
      <member refid="class_arbol_binario_1_1nodo_1a7be0572f10c8181362aec9878ff210f0" prot="private" virt="non-virtual"><scope>ArbolBinario::nodo</scope><name>p</name></member>
      <member refid="class_arbol_binario_1_1nodo_1a78b4d51bc9bd22f16a70c8e2bee3fef1" prot="public" virt="non-virtual"><scope>ArbolBinario::nodo</scope><name>padre</name></member>
      <member refid="class_arbol_binario_1_1nodo_1a4c0a969b995bdaf811e374833b2bafd4" prot="public" virt="non-virtual"><scope>ArbolBinario::nodo</scope><name>postorden_iterador</name></member>
      <member refid="class_arbol_binario_1_1nodo_1a4aa0da8bfbc320a8daff98451ee65b6c" prot="public" virt="non-virtual"><scope>ArbolBinario::nodo</scope><name>preorden_iterador</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
