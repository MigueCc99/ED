<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="class_ingredientes_1_1const__iterator" kind="class" language="C++" prot="public">
    <compoundname>Ingredientes::const_iterator</compoundname>
    <includes refid="ingredientes_8h" local="no">ingredientes.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_ingredientes_1_1const__iterator_1a9b367bb1f827fa5de9f0266e80adf02c" prot="private" static="no" mutable="no">
        <type>vector&lt; <ref refid="class_ingrediente" kindref="compound">Ingrediente</ref> &gt;::<ref refid="class_ingredientes_1_1const__iterator" kindref="compound">const_iterator</ref></type>
        <definition>vector&lt;Ingrediente&gt;::const_iterator Ingredientes::const_iterator::it</definition>
        <argsstring></argsstring>
        <name>it</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ingredientes.h" line="252" column="33" bodyfile="include/ingredientes.h" bodystart="252" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_ingredientes_1_1const__iterator_1a1a8c7f96971fda9a9b26b6d2a72e548b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class Ingredientes</definition>
        <argsstring></argsstring>
        <name>Ingredientes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ingredientes.h" line="282" column="9" bodyfile="include/ingredientes.h" bodystart="282" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_ingredientes_1_1const__iterator_1a65ceda30adc427d6f29359ea5bc194de" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_ingredientes_1_1const__iterator" kindref="compound">const_iterator</ref> &amp;</type>
        <definition>const_iterator&amp; Ingredientes::const_iterator::operator++</definition>
        <argsstring>()</argsstring>
        <name>operator++</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ingredientes.h" line="255" column="25" bodyfile="include/ingredientes.h" bodystart="255" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="class_ingredientes_1_1const__iterator_1aa069e2d5165a9690c411c516cb0930a7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_ingredientes_1_1const__iterator" kindref="compound">const_iterator</ref> &amp;</type>
        <definition>const_iterator&amp; Ingredientes::const_iterator::operator--</definition>
        <argsstring>()</argsstring>
        <name>operator--</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ingredientes.h" line="260" column="25" bodyfile="include/ingredientes.h" bodystart="260" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="class_ingredientes_1_1const__iterator_1ab6146a3efeee1f52623aa733a4bd4fc9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="class_ingrediente" kindref="compound">Ingrediente</ref> &amp;</type>
        <definition>const Ingrediente&amp; Ingredientes::const_iterator::operator*</definition>
        <argsstring>() const</argsstring>
        <name>operator*</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ingredientes.h" line="265" column="28" bodyfile="include/ingredientes.h" bodystart="265" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="class_ingredientes_1_1const__iterator_1adc549ffc966900cfabdc87e02e0ee02b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Ingredientes::const_iterator::operator==</definition>
        <argsstring>(const const_iterator &amp;i) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_ingredientes_1_1const__iterator" kindref="compound">const_iterator</ref> &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ingredientes.h" line="269" column="14" bodyfile="include/ingredientes.h" bodystart="269" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="class_ingredientes_1_1const__iterator_1a4894a635351685d4f541a20b7da9af09" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Ingredientes::const_iterator::operator!=</definition>
        <argsstring>(const const_iterator &amp;i) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="class_ingredientes_1_1const__iterator" kindref="compound">const_iterator</ref> &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ingredientes.h" line="273" column="14" bodyfile="include/ingredientes.h" bodystart="273" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="class_ingredientes_1_1const__iterator_1a9d817c2d61fa0a72c59d2e9e98f01390" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_ingredientes_1_1const__iterator" kindref="compound">const_iterator</ref> &amp;</type>
        <definition>const_iterator&amp; Ingredientes::const_iterator::operator=</definition>
        <argsstring>(const const_iterator &amp;i)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="class_ingredientes_1_1const__iterator" kindref="compound">const_iterator</ref> &amp;</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ingredientes.h" line="277" column="25" bodyfile="include/ingredientes.h" bodystart="277" bodyend="280"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Clase para iterar sobre los ingredientes (modo const) </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/ingredientes.h" line="250" column="25" bodyfile="include/ingredientes.h" bodystart="250" bodyend="284"/>
    <listofallmembers>
      <member refid="class_ingredientes_1_1const__iterator_1a1a8c7f96971fda9a9b26b6d2a72e548b" prot="public" virt="non-virtual"><scope>Ingredientes::const_iterator</scope><name>Ingredientes</name></member>
      <member refid="class_ingredientes_1_1const__iterator_1a9b367bb1f827fa5de9f0266e80adf02c" prot="private" virt="non-virtual"><scope>Ingredientes::const_iterator</scope><name>it</name></member>
      <member refid="class_ingredientes_1_1const__iterator_1a4894a635351685d4f541a20b7da9af09" prot="public" virt="non-virtual"><scope>Ingredientes::const_iterator</scope><name>operator!=</name></member>
      <member refid="class_ingredientes_1_1const__iterator_1ab6146a3efeee1f52623aa733a4bd4fc9" prot="public" virt="non-virtual"><scope>Ingredientes::const_iterator</scope><name>operator*</name></member>
      <member refid="class_ingredientes_1_1const__iterator_1a65ceda30adc427d6f29359ea5bc194de" prot="public" virt="non-virtual"><scope>Ingredientes::const_iterator</scope><name>operator++</name></member>
      <member refid="class_ingredientes_1_1const__iterator_1aa069e2d5165a9690c411c516cb0930a7" prot="public" virt="non-virtual"><scope>Ingredientes::const_iterator</scope><name>operator--</name></member>
      <member refid="class_ingredientes_1_1const__iterator_1a9d817c2d61fa0a72c59d2e9e98f01390" prot="public" virt="non-virtual"><scope>Ingredientes::const_iterator</scope><name>operator=</name></member>
      <member refid="class_ingredientes_1_1const__iterator_1adc549ffc966900cfabdc87e02e0ee02b" prot="public" virt="non-virtual"><scope>Ingredientes::const_iterator</scope><name>operator==</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
